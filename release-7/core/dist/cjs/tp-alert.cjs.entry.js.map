{"file":"tp-alert.entry.cjs.js","mappings":";;;;;;;AAAA,MAAM,QAAQ,GAAG,wiIAAwiI;;MCe5iI,OAAO;;;;;;IAWlB,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEhC,IAAI,OAAO,CAAC;QAEZ,IAAI,OAAO,EAAE;YACX,OAAO,GAAGA,+BACR,KAAK,EAAC,oBAAoB,EAC1B,QAAQ,SACW,CAAC;SACvB;aAAM;YACL,OAAO,GAAGA,iBAAK,KAAK,EAAC,qBAAqB,IACxCA,kBAAM,IAAI,EAAC,MAAM,GAAG,EACpBA,kBAAM,IAAI,EAAC,MAAM,GAAG,CAChB,CAAC;SACR;QAED,OAAOA,QAACC,UAAI,IAAC,KAAK,EAAEC,iCAAkB,CAAC,KAAK,EAAE;gBAC5C,UAAU,EAAE,IAAI;gBAChB,mBAAmB,EAAE,OAAO;aAC7B,CAAC,IACC,OAAO,CACH,CAAC;KACT;;;;;;","names":["h","Host","createColorClasses"],"sources":["src/components/templarios/alert/alert.scss?tag=tp-alert&encapsulation=shadow","src/components/templarios/alert/alert.tsx"],"sourcesContent":["@import './../../../styles/definitions/type';\r\n\r\n:host  {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  background: var(--tp-color-neutral-2);\r\n}\r\n\r\n.tp-alert {\r\n  &__container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 12px;\r\n  }\r\n\r\n  &__skeleton {\r\n    --background-rgb: var(--tp-color-neutral-10-rgb);\r\n    --border-radius: 0;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n::slotted([slot='icon']) {\r\n  min-width: 16px;\r\n  margin-right: 16px;\r\n}\r\n\r\n::slotted([slot='text']) {\r\n  color: var(--tp-color-neutral-10);\r\n  text-align: center;\r\n}\r\n\r\n//\r\n// color\r\n//\r\n:host(.tp-color) {\r\n  background: var(--tp-color-base);\r\n\r\n  ::slotted([slot='icon']) {\r\n    --stroke: var(--tp-color-contrast);\r\n  }\r\n\r\n  ::slotted([slot='text']) {\r\n    color: var(--tp-color-contrast) !important;\r\n  }\r\n}\r\n\r\n:host(.tp-color-warning),\r\n:host(.tp-color-provas-4) {\r\n  ::slotted([slot='icon']) {\r\n    --stroke: var(--tp-color-neutral-10);\r\n  }\r\n\r\n  ::slotted([slot='text']) {\r\n    color: var(--tp-color-neutral-10) !important;\r\n  }\r\n}\r\n\r\n//\r\n// loading\r\n//\r\n:host(.tp-alert--loading) {\r\n  background: transparent;\r\n}\r\n","import {\r\n  Component,\r\n  Host,\r\n  Prop,\r\n  h,\r\n} from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\n\r\n\r\n@Component({\r\n  tag: 'tp-alert',\r\n  styleUrl: 'alert.scss',\r\n  shadow: true,\r\n})\r\nexport class TpAlert {\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * Define o estado de carregamento do componente.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\r\n\r\n  render() {\r\n    const { color, loading } = this;\r\n\r\n    let content;\r\n\r\n    if (loading) {\r\n      content = <ion-skeleton-text\r\n        class=\"tp-alert__skeleton\"\r\n        animated\r\n      ></ion-skeleton-text>;\r\n    } else {\r\n      content = <div class=\"tp-alert__container\">\r\n        <slot name=\"icon\" />\r\n        <slot name=\"text\" />\r\n      </div>;\r\n    }\r\n\r\n    return <Host class={createColorClasses(color, {\r\n      'tp-alert': true,\r\n      'tp-alert--loading': loading,\r\n    })}>\r\n      {content}\r\n    </Host>;\r\n  }\r\n}\r\n"],"version":3}