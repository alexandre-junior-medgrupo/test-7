{"file":"tp-alert.entry.cjs.js","mappings":";;;;;;;AAAA,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,mCAAmB,CAAA;IACnB,uCAAuB,CAAA;AACzB,CAAC,EAHW,YAAY,KAAZ,YAAY;;ACAxB,MAAM,QAAQ,GAAG,6zIAA6zI;;MCkBj0I,OAAO;;;;;;;;;IA0BlB,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAEtD,IAAI,UAAU,CAAC;QACf,IAAI,aAAa,CAAC;QAClB,IAAI,OAAO,CAAC;QAEZ,UAAU,GAAGA,kBAAY,CAAC,qBAAqB,IAAI,MAAM,CAAC,CAAC;QAC3D,aAAa,GAAG,OAAO,CAAC;QAExB,IAAI,KAAK,KAAK,YAAY,CAAC,OAAO,EAAE;YAClC,UAAU,GAAGA,kBAAY,CAAC,oCAAoC,CAAC,CAAC;YAChE,aAAa,GAAG,wDAAwD,CAAC;SAC1E;aAAM,IAAI,KAAK,KAAK,YAAY,CAAC,SAAS,EAAE;YAC3C,UAAU,GAAGA,kBAAY,CAAC,yCAAyC,CAAC,CAAC;YACrE,aAAa,GAAG,sBAAsB,CAAC;SACxC;QAED,IAAI,OAAO,EAAE;YACX,OAAO,GAAGC,+BACR,KAAK,EAAC,oBAAoB,EAC1B,QAAQ,SACW,CAAC;SACvB;aAAM;YACL,OAAO,GAAGA,iBAAK,KAAK,EAAC,qBAAqB,IACxCA,sBAAU,KAAK,EAAC,gBAAgB,aAAS,IAAI,EAAC,GAAG,EAAE,UAAU,GAAa,EAC1EA,sBAAU,KAAK,EAAC,gBAAgB,aAAS,MAAM,IAAE,aAAa,CAAY,CACtE,CAAC;SACR;QAED,OAAOA,QAACC,UAAI,IAAC,KAAK,EAAEC,iCAAkB,CAAC,KAAK,EAAE;gBAC5C,UAAU,EAAE,IAAI;gBAChB,mBAAmB,EAAE,KAAK,KAAK,YAAY,CAAC,OAAO;gBACnD,qBAAqB,EAAE,KAAK,KAAK,YAAY,CAAC,SAAS;gBACvD,mBAAmB,EAAE,OAAO;aAC7B,CAAC,IACC,OAAO,CACH,CAAC;KACT;;;;;;;","names":["getAssetPath","h","Host","createColorClasses"],"sources":["src/components/templarios/alert/alert.enum.ts","src/components/templarios/alert/alert.scss?tag=tp-alert&encapsulation=shadow","src/components/templarios/alert/alert.tsx"],"sourcesContent":["export enum TpAlertState {\r\n  OFFLINE = 'offline',\r\n  ATUALIZAR = 'atualizar',\r\n}\r\n","@import './../../../styles/definitions/type';\r\n\r\n/**\r\n  * @prop --tp-skeleton-height: Define a altura do skeleton do componente.\r\n  * @prop --tp-skeleton-width: Define a largura do skeleton do componente.\r\n  * @prop --tp-skeleton-background-rgb: Define o background rgb do skeleton do componente.\r\n*/\r\n\r\n:host  {\r\n  --tp-skeleton-height: calc(var(--height) * 1px);\r\n  --tp-skeleton-width: calc(var(--width) * 1px);\r\n  --tp-skeleton-background-rgb: var(--tp-color-neutral-10-rgb);\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  background: var(--tp-color-neutral-2);\r\n}\r\n\r\n.tp-alert {\r\n  &__container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 12px;\r\n  }\r\n\r\n  &__icon {\r\n    min-width: 16px;\r\n    margin-right: 16px;\r\n  }\r\n\r\n  &__text {\r\n    color: var(--tp-color-neutral-10);\r\n    text-align: center;\r\n  }\r\n\r\n  &__skeleton {\r\n    --background-rgb: var(--tp-skeleton-background-rgb);\r\n    --border-radius: 0;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n//\r\n// color\r\n//\r\n:host(.tp-color) {\r\n  background: var(--tp-color-base);\r\n\r\n  .tp-alert {\r\n    &__icon {\r\n      --stroke: var(--tp-color-contrast);\r\n    }\r\n\r\n    &__text {\r\n      color: var(--tp-color-contrast);\r\n    }\r\n  }\r\n}\r\n\r\n//\r\n// state\r\n//\r\n:host(.tp-alert--offline) {\r\n  background: var(--tp-color-warning);\r\n\r\n  .tp-alert {\r\n    &__icon {\r\n      --stroke: var(--tp-color-neutral-10);\r\n    }\r\n\r\n    &__text {\r\n      color: var(--tp-color-neutral-10);\r\n    }\r\n  }\r\n}\r\n\r\n:host(.tp-alert--atualizar) {\r\n  background: var(--tp-color-provas-4);\r\n\r\n  .tp-alert {\r\n    &__icon {\r\n      --stroke: var(--tp-color-neutral-10);\r\n    }\r\n\r\n    &__text {\r\n      color: var(--tp-color-neutral-10);\r\n    }\r\n  }\r\n}\r\n\r\n//\r\n// loading\r\n//\r\n:host(.tp-alert--loading) {\r\n  background: transparent;\r\n}\r\n","import {\r\n  Component,\r\n  Host,\r\n  Prop,\r\n  h,\r\n  getAssetPath,\r\n} from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\nimport { TpAlertType } from './alert.type';\r\nimport { TpAlertState } from './alert.enum';\r\n\r\n@Component({\r\n  tag: 'tp-alert',\r\n  styleUrl: 'alert.scss',\r\n  assetsDirs: ['assets'],\r\n  shadow: true,\r\n})\r\nexport class TpAlert {\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * Define a variação de estado do componente.\r\n   */\r\n  @Prop({ reflect: true }) state?: TpAlertType['state'];\r\n\r\n  /**\r\n   * Define a string a ser exibida no componente.\r\n   */\r\n  @Prop({ reflect: true }) message: string;\r\n\r\n  /**\r\n   * Define o icon a ser exibido no componente.\r\n   */\r\n  @Prop({ reflect: true }) icon: string;\r\n\r\n  /**\r\n   * Define o estado de carregamento do componente.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\r\n\r\n  render() {\r\n    const { color, icon, loading, message, state } = this;\r\n\r\n    let renderIcon;\r\n    let renderMessage;\r\n    let content;\r\n\r\n    renderIcon = getAssetPath(`../../../../icons/${icon}.svg`);\r\n    renderMessage = message;\r\n\r\n    if (state === TpAlertState.OFFLINE) {\r\n      renderIcon = getAssetPath(`../../../../icons/tp-wi-fi-off.svg`);\r\n      renderMessage = 'Você está offline. Conecte-se para acessar o conteúdo.';\r\n    } else if (state === TpAlertState.ATUALIZAR) {\r\n      renderIcon = getAssetPath(`../../../../icons/tp-alert-triangle.svg`);\r\n      renderMessage = 'Versão desatualizada';\r\n    }\r\n\r\n    if (loading) {\r\n      content = <ion-skeleton-text\r\n        class=\"tp-alert__skeleton\"\r\n        animated\r\n      ></ion-skeleton-text>;\r\n    } else {\r\n      content = <div class=\"tp-alert__container\">\r\n        <ion-icon class=\"tp-alert__icon\" tp-size=\"sm\" src={renderIcon}></ion-icon>\r\n        <ion-text class=\"tp-alert__text\" tp-type=\"p12x\">{renderMessage}</ion-text>\r\n      </div>;\r\n    }\r\n\r\n    return <Host class={createColorClasses(color, {\r\n      'tp-alert': true,\r\n      'tp-alert--offline': state === TpAlertState.OFFLINE,\r\n      'tp-alert--atualizar': state === TpAlertState.ATUALIZAR,\r\n      'tp-alert--loading': loading,\r\n    })}>\r\n      {content}\r\n    </Host>;\r\n  }\r\n}\r\n"],"version":3}