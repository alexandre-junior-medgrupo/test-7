{"file":"tp-button-cluster.entry.js","mappings":";;;AAAA,MAAM,gBAAgB,GAAG,0qCAA0qC;;MCiBtrC,eAAe;;;QAClB,cAAS,GAAG,YAAY,CAAC,8BAA8B,CAAC,CAAC;;yBAUb,IAAI;;;IAQxD,MAAM,MAAM,CAAC,KAAa;QACxB,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,eAAe,EAAE,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;KAClC;IAED,MAAM;QACJ,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEtD,IAAI,OAAO,CAAC;QAEZ,IAAI,OAAO,EAAE;YACX,OAAO,GAAG,WAAK,KAAK,EAAC,8BAA8B,IACjD,yBACE,KAAK,EAAC,kCAAkC,EACxC,QAAQ,SACW,EACrB,yBACE,KAAK,EAAC,kCAAkC,EACxC,QAAQ,SACW,CACjB,CAAC;SACR;aAAM;YACL,OAAO,GAAG,WAAK,KAAK,EAAC,8BAA8B,EACjD,OAAO,EAAE,CAAC,KAAU,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA,EAAE,IAC/C,YAAM,IAAI,EAAC,aAAa,GAAQ,EAChC,gBACE,KAAK,EAAC,yBAAyB,EAC/B,GAAG,EAAE,SAAS,iBACF,MAAM,GACR,EACZ,YAAM,IAAI,EAAC,eAAe,GAAQ,CAC9B,CAAC;SACR;QAED,OAAO,EAAC,IAAI,IAAC,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC5C,mBAAmB,EAAE,IAAI;gBACzB,8BAA8B,EAAE,SAAS;gBACzC,4BAA4B,EAAE,OAAO;aACtC,CAAC,IACC,OAAO,CACH,CAAC;KACT;;;;;;;","names":[],"sources":["src/components/templarios/button-cluster/button-cluster.scss?tag=tp-button-cluster&encapsulation=shadow","src/components/templarios/button-cluster/button-cluster.tsx"],"sourcesContent":[":host {\r\n  cursor: pointer;\r\n}\r\n\r\n.tp-button-cluster {\r\n  &__container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding: 4px;\r\n  }\r\n\r\n  &__icon {\r\n    --stroke: var(--tp-color-brand-4);\r\n    width: 16px;\r\n    height: 16px;\r\n    transform: rotate(180deg);\r\n  }\r\n\r\n  &__skeleton-text {\r\n    --background-rgb: var(--tp-color-neutral-10-rgb);\r\n    --border-radius: 0;\r\n    width: 85px;\r\n    height: 12px;\r\n    margin: 0 0 4px;\r\n  }\r\n\r\n  &__skeleton-icon {\r\n    --background-rgb: var(--tp-color-neutral-10-rgb);\r\n    --border-radius: 0;\r\n    width: 16px;\r\n    height: 16px;\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n::slotted([slot=\"expand-text\"]) {\r\n  display: none;\r\n  margin-bottom: 4px !important;\r\n  color: var(--tp-color-brand-4);\r\n}\r\n\r\n::slotted([slot=\"collapse-text\"]) {\r\n  margin-top: 4px !important;\r\n  color: var(--tp-color-brand-4);\r\n}\r\n\r\n//\r\n// collapsed\r\n//\r\n:host(.tp-button-cluster--collapsed) {\r\n  ::slotted([slot=\"expand-text\"]) {\r\n    display: block;\r\n  }\r\n\r\n  ::slotted([slot=\"collapse-text\"]) {\r\n    display: none;\r\n  }\r\n\r\n  .tp-button-cluster__icon {\r\n    transform: rotate(0deg);\r\n  }\r\n}\r\n\r\n//\r\n// loading\r\n//\r\n:host(.tp-button-cluster--loading) {\r\n  pointer-events: none;\r\n}\r\n\r\n//\r\n// color\r\n//\r\n:host(.tp-color) {\r\n  .tp-button-cluster__icon {\r\n    --stroke: var(--tp-color-base);\r\n  }\r\n\r\n  ::slotted([slot=\"expand-text\"]) ,\r\n  ::slotted([slot=\"collapse-text\"]) {\r\n    color: var(--tp-color-base);\r\n  }\r\n}\r\n","import {\n  Component,\n  Host,\n  Method,\n  Prop,\n  getAssetPath,\n  h,\n} from '@stencil/core';\nimport { createColorClasses } from '../../../utils/functions/color.function';\nimport type { TpColor } from '../../../utils/types/color.type';\n\n@Component({\n  tag: 'tp-button-cluster',\n  styleUrl: 'button-cluster.scss',\n  assetsDirs: ['assets'],\n  shadow: true,\n})\nexport class TpButtonCluster {\n  private arrowIcon = getAssetPath('./assets/tp-chevron-down.svg');\n\n  /**\n   * Define a variação de cor do componente.\n   */\n  @Prop({ reflect: true }) color?: TpColor;\n\n  /**\n   * Define a variação de estado do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) collapsed = true;\n\n  /**\n   * Define o estado de carregamento do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\n\n  @Method()\n  async toggle(event?: Event) {\n    event?.stopPropagation();\n    this.collapsed = !this.collapsed;\n  }\n\n  render() {\n    const { arrowIcon, collapsed, color, loading } = this;\n\n    let content;\n\n    if (loading) {\n      content = <div class=\"tp-button-cluster__container\">\n        <ion-skeleton-text\n          class=\"tp-button-cluster__skeleton-text\"\n          animated\n        ></ion-skeleton-text>\n        <ion-skeleton-text\n          class=\"tp-button-cluster__skeleton-icon\"\n          animated\n        ></ion-skeleton-text>\n      </div>;\n    } else {\n      content = <div class=\"tp-button-cluster__container\"\n        onClick={(event: any) => { this.toggle(event) }}>\n        <slot name=\"expand-text\"></slot>\n        <ion-icon\n          class=\"tp-button-cluster__icon\"\n          src={arrowIcon}\n          aria-hidden=\"true\"\n        ></ion-icon>\n        <slot name=\"collapse-text\"></slot>\n      </div>;\n    }\n\n    return <Host class={createColorClasses(color, {\n      'tp-button-cluster': true,\n      'tp-button-cluster--collapsed': collapsed,\n      'tp-button-cluster--loading': loading,\n    })}>\n      {content}\n    </Host>;\n  }\n}\n"],"version":3}