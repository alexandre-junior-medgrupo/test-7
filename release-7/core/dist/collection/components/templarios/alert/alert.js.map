{"version":3,"file":"alert.js","sourceRoot":"","sources":["../../../../src/components/templarios/alert/alert.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,CAAC,EACD,YAAY,GACb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAG7E,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAQ5C,MAAM,OAAO,OAAO;;;;;;;;IA0BlB,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;QAEtD,IAAI,UAAU,CAAC;QACf,IAAI,aAAa,CAAC;QAClB,IAAI,OAAO,CAAC;QAEZ,UAAU,GAAG,YAAY,CAAC,qBAAqB,IAAI,MAAM,CAAC,CAAC;QAC3D,aAAa,GAAG,OAAO,CAAC;QAExB,IAAI,KAAK,KAAK,YAAY,CAAC,OAAO,EAAE;YAClC,UAAU,GAAG,YAAY,CAAC,oCAAoC,CAAC,CAAC;YAChE,aAAa,GAAG,wDAAwD,CAAC;SAC1E;aAAM,IAAI,KAAK,KAAK,YAAY,CAAC,SAAS,EAAE;YAC3C,UAAU,GAAG,YAAY,CAAC,yCAAyC,CAAC,CAAC;YACrE,aAAa,GAAG,sBAAsB,CAAC;SACxC;QAED,IAAI,OAAO,EAAE;YACX,OAAO,GAAG,yBACR,KAAK,EAAC,oBAAoB,EAC1B,QAAQ,SACW,CAAC;SACvB;aAAM;YACL,OAAO,GAAG,WAAK,KAAK,EAAC,qBAAqB;gBACxC,gBAAU,KAAK,EAAC,gBAAgB,aAAS,IAAI,EAAC,GAAG,EAAE,UAAU,GAAa;gBAC1E,gBAAU,KAAK,EAAC,gBAAgB,aAAS,MAAM,IAAE,aAAa,CAAY,CACtE,CAAC;SACR;QAED,OAAO,EAAC,IAAI,IAAC,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC5C,UAAU,EAAE,IAAI;gBAChB,mBAAmB,EAAE,KAAK,KAAK,YAAY,CAAC,OAAO;gBACnD,qBAAqB,EAAE,KAAK,KAAK,YAAY,CAAC,SAAS;gBACvD,mBAAmB,EAAE,OAAO;aAC7B,CAAC,IACC,OAAO,CACH,CAAC;IACV,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\r\n  Component,\r\n  Host,\r\n  Prop,\r\n  h,\r\n  getAssetPath,\r\n} from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\nimport { TpAlertType } from './alert.type';\r\nimport { TpAlertState } from './alert.enum';\r\n\r\n@Component({\r\n  tag: 'tp-alert',\r\n  styleUrl: 'alert.scss',\r\n  assetsDirs: ['assets'],\r\n  shadow: true,\r\n})\r\nexport class TpAlert {\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * Define a variação de estado do componente.\r\n   */\r\n  @Prop({ reflect: true }) state?: TpAlertType['state'];\r\n\r\n  /**\r\n   * Define a string a ser exibida no componente.\r\n   */\r\n  @Prop({ reflect: true }) message: string;\r\n\r\n  /**\r\n   * Define o icon a ser exibido no componente.\r\n   */\r\n  @Prop({ reflect: true }) icon: string;\r\n\r\n  /**\r\n   * Define o estado de carregamento do componente.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\r\n\r\n  render() {\r\n    const { color, icon, loading, message, state } = this;\r\n\r\n    let renderIcon;\r\n    let renderMessage;\r\n    let content;\r\n\r\n    renderIcon = getAssetPath(`../../../../icons/${icon}.svg`);\r\n    renderMessage = message;\r\n\r\n    if (state === TpAlertState.OFFLINE) {\r\n      renderIcon = getAssetPath(`../../../../icons/tp-wi-fi-off.svg`);\r\n      renderMessage = 'Você está offline. Conecte-se para acessar o conteúdo.';\r\n    } else if (state === TpAlertState.ATUALIZAR) {\r\n      renderIcon = getAssetPath(`../../../../icons/tp-alert-triangle.svg`);\r\n      renderMessage = 'Versão desatualizada';\r\n    }\r\n\r\n    if (loading) {\r\n      content = <ion-skeleton-text\r\n        class=\"tp-alert__skeleton\"\r\n        animated\r\n      ></ion-skeleton-text>;\r\n    } else {\r\n      content = <div class=\"tp-alert__container\">\r\n        <ion-icon class=\"tp-alert__icon\" tp-size=\"sm\" src={renderIcon}></ion-icon>\r\n        <ion-text class=\"tp-alert__text\" tp-type=\"p12x\">{renderMessage}</ion-text>\r\n      </div>;\r\n    }\r\n\r\n    return <Host class={createColorClasses(color, {\r\n      'tp-alert': true,\r\n      'tp-alert--offline': state === TpAlertState.OFFLINE,\r\n      'tp-alert--atualizar': state === TpAlertState.ATUALIZAR,\r\n      'tp-alert--loading': loading,\r\n    })}>\r\n      {content}\r\n    </Host>;\r\n  }\r\n}\r\n"]}