{"version":3,"file":"button-cluster.js","sourceRoot":"","sources":["../../../../src/components/templarios/button-cluster/button-cluster.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,YAAY,EACZ,CAAC,GACF,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAS7E,MAAM,OAAO,eAAe;;QAClB,cAAS,GAAG,YAAY,CAAC,8BAA8B,CAAC,CAAC;;yBAUb,IAAI;;;IAQxD,KAAK,CAAC,MAAM,CAAC,KAAa;QACxB,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,eAAe,EAAE,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;IACnC,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEtD,IAAI,OAAO,CAAC;QAEZ,IAAI,OAAO,EAAE;YACX,OAAO,GAAG,WAAK,KAAK,EAAC,8BAA8B;gBACjD,yBACE,KAAK,EAAC,kCAAkC,EACxC,QAAQ,SACW;gBACrB,yBACE,KAAK,EAAC,kCAAkC,EACxC,QAAQ,SACW,CACjB,CAAC;SACR;aAAM;YACL,OAAO,GAAG,WAAK,KAAK,EAAC,8BAA8B,EACjD,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;gBAC/C,YAAM,IAAI,EAAC,aAAa,GAAQ;gBAChC,gBACE,KAAK,EAAC,yBAAyB,EAC/B,GAAG,EAAE,SAAS,iBACF,MAAM,GACR;gBACZ,YAAM,IAAI,EAAC,eAAe,GAAQ,CAC9B,CAAC;SACR;QAED,OAAO,EAAC,IAAI,IAAC,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC5C,mBAAmB,EAAE,IAAI;gBACzB,8BAA8B,EAAE,SAAS;gBACzC,4BAA4B,EAAE,OAAO;aACtC,CAAC,IACC,OAAO,CACH,CAAC;IACV,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\r\n  Component,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  getAssetPath,\r\n  h,\r\n} from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\n\r\n@Component({\r\n  tag: 'tp-button-cluster',\r\n  styleUrl: 'button-cluster.scss',\r\n  assetsDirs: ['assets'],\r\n  shadow: true,\r\n})\r\nexport class TpButtonCluster {\r\n  private arrowIcon = getAssetPath('./assets/tp-chevron-down.svg');\r\n\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * Define a variação de estado do componente.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) collapsed = true;\r\n\r\n  /**\r\n   * Define o estado de carregamento do componente.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\r\n\r\n  @Method()\r\n  async toggle(event?: Event) {\r\n    event?.stopPropagation();\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  render() {\r\n    const { arrowIcon, collapsed, color, loading } = this;\r\n\r\n    let content;\r\n\r\n    if (loading) {\r\n      content = <div class=\"tp-button-cluster__container\">\r\n        <ion-skeleton-text\r\n          class=\"tp-button-cluster__skeleton-text\"\r\n          animated\r\n        ></ion-skeleton-text>\r\n        <ion-skeleton-text\r\n          class=\"tp-button-cluster__skeleton-icon\"\r\n          animated\r\n        ></ion-skeleton-text>\r\n      </div>;\r\n    } else {\r\n      content = <div class=\"tp-button-cluster__container\"\r\n        onClick={(event: any) => { this.toggle(event) }}>\r\n        <slot name=\"expand-text\"></slot>\r\n        <ion-icon\r\n          class=\"tp-button-cluster__icon\"\r\n          src={arrowIcon}\r\n          aria-hidden=\"true\"\r\n        ></ion-icon>\r\n        <slot name=\"collapse-text\"></slot>\r\n      </div>;\r\n    }\r\n\r\n    return <Host class={createColorClasses(color, {\r\n      'tp-button-cluster': true,\r\n      'tp-button-cluster--collapsed': collapsed,\r\n      'tp-button-cluster--loading': loading,\r\n    })}>\r\n      {content}\r\n    </Host>;\r\n  }\r\n}\r\n"]}