{"version":3,"file":"button-cluster.js","sourceRoot":"","sources":["../../../../src/components/templarios/button-cluster/button-cluster.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,YAAY,EACZ,CAAC,GACF,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAS7E,MAAM,OAAO,eAAe;;QAClB,cAAS,GAAG,YAAY,CAAC,8BAA8B,CAAC,CAAC;;yBAUb,IAAI;;;IAQxD,KAAK,CAAC,MAAM,CAAC,KAAa;QACxB,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,eAAe,EAAE,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;IACnC,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAEtD,IAAI,OAAO,CAAC;QAEZ,IAAI,OAAO,EAAE;YACX,OAAO,GAAG,WAAK,KAAK,EAAC,8BAA8B;gBACjD,yBACE,KAAK,EAAC,kCAAkC,EACxC,QAAQ,SACW;gBACrB,yBACE,KAAK,EAAC,kCAAkC,EACxC,QAAQ,SACW,CACjB,CAAC;SACR;aAAM;YACL,OAAO,GAAG,WAAK,KAAK,EAAC,8BAA8B,EACjD,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;gBAC/C,YAAM,IAAI,EAAC,aAAa,GAAQ;gBAChC,gBACE,KAAK,EAAC,yBAAyB,EAC/B,GAAG,EAAE,SAAS,iBACF,MAAM,GACR;gBACZ,YAAM,IAAI,EAAC,eAAe,GAAQ,CAC9B,CAAC;SACR;QAED,OAAO,EAAC,IAAI,IAAC,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC5C,mBAAmB,EAAE,IAAI;gBACzB,8BAA8B,EAAE,SAAS;gBACzC,4BAA4B,EAAE,OAAO;aACtC,CAAC,IACC,OAAO,CACH,CAAC;IACV,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {\n  Component,\n  Host,\n  Method,\n  Prop,\n  getAssetPath,\n  h,\n} from '@stencil/core';\nimport { createColorClasses } from '../../../utils/functions/color.function';\nimport type { TpColor } from '../../../utils/types/color.type';\n\n@Component({\n  tag: 'tp-button-cluster',\n  styleUrl: 'button-cluster.scss',\n  assetsDirs: ['assets'],\n  shadow: true,\n})\nexport class TpButtonCluster {\n  private arrowIcon = getAssetPath('./assets/tp-chevron-down.svg');\n\n  /**\n   * Define a variação de cor do componente.\n   */\n  @Prop({ reflect: true }) color?: TpColor;\n\n  /**\n   * Define a variação de estado do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) collapsed = true;\n\n  /**\n   * Define o estado de carregamento do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\n\n  @Method()\n  async toggle(event?: Event) {\n    event?.stopPropagation();\n    this.collapsed = !this.collapsed;\n  }\n\n  render() {\n    const { arrowIcon, collapsed, color, loading } = this;\n\n    let content;\n\n    if (loading) {\n      content = <div class=\"tp-button-cluster__container\">\n        <ion-skeleton-text\n          class=\"tp-button-cluster__skeleton-text\"\n          animated\n        ></ion-skeleton-text>\n        <ion-skeleton-text\n          class=\"tp-button-cluster__skeleton-icon\"\n          animated\n        ></ion-skeleton-text>\n      </div>;\n    } else {\n      content = <div class=\"tp-button-cluster__container\"\n        onClick={(event: any) => { this.toggle(event) }}>\n        <slot name=\"expand-text\"></slot>\n        <ion-icon\n          class=\"tp-button-cluster__icon\"\n          src={arrowIcon}\n          aria-hidden=\"true\"\n        ></ion-icon>\n        <slot name=\"collapse-text\"></slot>\n      </div>;\n    }\n\n    return <Host class={createColorClasses(color, {\n      'tp-button-cluster': true,\n      'tp-button-cluster--collapsed': collapsed,\n      'tp-button-cluster--loading': loading,\n    })}>\n      {content}\n    </Host>;\n  }\n}\n"]}