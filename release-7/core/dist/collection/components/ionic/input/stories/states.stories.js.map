{"version":3,"file":"states.stories.js","sourceRoot":"","sources":["../../../../../src/components/ionic/input/stories/states.stories.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,EAAE,mBAAmB,IAAI,wBAAwB,EAAE,MAAM,kCAAkC,CAAC;AAEnG,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EAAE,kBAAkB,EAAE,MAAM,qEAAqE,CAAC;AAIzG,wBAAwB,EAAE,CAAC;AAE3B,MAAM,IAAI,GAA8D;IACtE,KAAK,EAAE,wBAAwB;IAC/B,QAAQ,EAAE;QACR,UAAU,EAAE;YACV,OAAO,EAAE,SAAS;YAClB,WAAW,EACT,iGAAiG;YACnG,KAAK,EAAE;gBACL,YAAY,EAAE;oBACZ,OAAO,EAAE,WAAW;iBACrB;gBACD,IAAI,EAAE;oBACJ,OAAO,EAAE,SAAS;iBACnB;aACF;SACF;QACD,QAAQ,EAAE;YACR,OAAO,EAAE,SAAS;YAClB,WAAW,EAAE,wDAAwD;YACrE,KAAK,EAAE;gBACL,YAAY,EAAE;oBACZ,OAAO,EAAE,WAAW;iBACrB;gBACD,IAAI,EAAE;oBACJ,OAAO,EAAE,SAAS;iBACnB;aACF;SACF;QACD,KAAK,EAAE;YACL,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;YAC3B,OAAO,EAAE,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC;YACtC,WAAW,EAAC;;;CAGjB;YACK,KAAK,EAAE;gBACL,YAAY,EAAE;oBACZ,OAAO,EAAE,WAAW;iBACrB;gBACD,IAAI,EAAE;oBACJ,OAAO,EAAE,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;iBAC5C;aACF;SACF;KACF;CACF,CAAC;AAEF,eAAe,IAAI,CAAC;AAIpB,MAAM,CAAC,MAAM,MAAM,GAAU;IAC3B,MAAM,EAAE,CAAC,EAAW,EAAE,EAAE;YAAV,IAAI,cAAT,EAAW,CAAF;QAChB,OAAO,IAAI,CAAA;iCACkB,IAAI,CAAC,KAAK,YAAY,IAAI,CAAC,KAAK;;;;;qBAK5C,IAAI,CAAC,QAAQ;wBACV,IAAI,CAAC,UAAU;;;;;KAKlC,CAAC;IACJ,CAAC;IACD;;;SAGK;CACN,CAAC","sourcesContent":["import { Components } from '@ionic/core';\nimport { defineCustomElement as defineCustomElementInput } from '@ionic/core/components/ion-input';\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { TP_INPUT_CONTAINER } from '../../../templarios/input-container/utils/input-container.constants';\nimport { TpInputContainer } from '../../../templarios/input-container/utils/input-container.type';\nimport { TpIonInput } from '../utils/input.type';\n\ndefineCustomElementInput();\n\nconst meta: Meta<Components.IonInput & TpIonInput & TpInputContainer> = {\n  title: 'components/Ionic/Input',\n  argTypes: {\n    clearInput: {\n      control: 'boolean',\n      description:\n        'Se **true**, uma tag **button** será renderizada e o input terá a ação de **limpeza** do texto.',\n      table: {\n        defaultValue: {\n          summary: 'undefined',\n        },\n        type: {\n          summary: 'boolean',\n        },\n      },\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Define a estilização do estado disabled do componente.',\n      table: {\n        defaultValue: {\n          summary: 'undefined',\n        },\n        type: {\n          summary: 'boolean',\n        },\n      },\n    },\n    state: {\n      control: { type: 'select' },\n      options: [...TP_INPUT_CONTAINER.state],\n      description:`Define o estado do componente **'tp-input-container'**.\n\n**OBS**: Atributo referente ao componente **'tp-input-container'**.\n`,\n      table: {\n        defaultValue: {\n          summary: 'undefined',\n        },\n        type: {\n          summary: TP_INPUT_CONTAINER.state.join('|'),\n        },\n      },\n    },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<Components.IonInput & TpIonInput & TpInputContainer>;\n\nexport const States: Story = {\n  render: ({ ...args }) => {\n    return html`\n    <tp-input-container color=\"${args.color}\" state=\"${args.state}\">\n      <ion-label slot=\"label\" tp-type=\"p14\">Descrição Input</ion-label>\n      <ion-input\n        mode=\"md\"\n        placeholder=\"Digite aqui\"\n        ?disabled=\"${args.disabled}\"\n        ?clear-input=\"${args.clearInput}\"\n      ></ion-input>\n      <ion-label slot=\"feedback-error\" tp-type=\"p14\">*Caracteres invalidos</ion-label>\n      <ion-label slot=\"feedback-success\" tp-type=\"p14\">*Caracteres validos</ion-label>\n    </tp-input-container>\n    `;\n  },\n  /* play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/ion-input/gi)).toBeTruthy();\n  }, */\n};\n"]}