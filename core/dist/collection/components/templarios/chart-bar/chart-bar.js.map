{"version":3,"file":"chart-bar.js","sourceRoot":"","sources":["../../../../src/components/templarios/chart-bar/chart-bar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAC;AAS7E,MAAM,OAAO,UAAU;;;qBASY,CAAC;sBAKA,EAAE;qBAKH,EAAE;uBAKA,KAAK;;;IAOxC,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAE/D,MAAM,UAAU,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;QAEtE,IAAI,OAAO,CAAC;QAEZ,IAAI,OAAO,EAAE;YACX,OAAO,GAAG,CACR,WAAK,KAAK,EAAC,yBAAyB;gBACjC,CAAC,OAAO,IAAI,CACX,yBACE,KAAK,EAAC,8BAA8B,EACpC,QAAQ,SACW,CACtB;gBACD,yBACE,KAAK,EAAC,wBAAwB,EAC9B,QAAQ,SACW,CACjB,CACP,CAAC;SACH;aAAM;YACL,OAAO,GAAG,CACR,WAAK,KAAK,EAAC,yBAAyB;gBACjC,CAAC,OAAO,IAAI,CACX,WAAK,KAAK,EAAC,qBAAqB;oBAC9B,eAAa,CACT,CACP;gBAED,WAAK,KAAK,EAAC,wBAAwB,GAAO,CACtC,CACP,CAAC;SACH;QAED,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,cAAc,EAAE,IAAI;gBACpB,wBAAwB,EAAE,OAAO;gBACjC,uBAAuB,EAAE,OAAO;aACjC,CAAC,EACF,KAAK,EAAE;gBACL,SAAS,EAAE,GAAG,UAAU,EAAE;gBAC1B,UAAU,EAAE,GAAG,MAAM,EAAE;gBACvB,SAAS,EAAE,GAAG,KAAK,EAAE;aACtB,IAEA,OAAO,CACH,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Prop, h } from '@stencil/core';\r\nimport { createColorClasses } from '../../../utils/functions/color.function';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\n\r\n@Component({\r\n  tag: 'tp-chart-bar',\r\n  styleUrl: 'chart-bar.scss',\r\n  assetsDirs: ['assets'],\r\n  shadow: true,\r\n})\r\nexport class TpChartBar {\r\n  /**\r\n   * Define a variação de cor do componente.\r\n   */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * Define o valor do preenchimento do componente.\r\n   */\r\n  @Prop({ reflect: true }) value = 0;\r\n\r\n  /**\r\n   * Define a altura do componente.\r\n   */\r\n  @Prop({ reflect: true }) height = 50;\r\n\r\n  /**\r\n   * Define a largura do componente.\r\n   */\r\n  @Prop({ reflect: true }) width = 32;\r\n\r\n  /**\r\n   * Define se o componente irá apresentar rótulo ou não.\r\n   */\r\n  @Prop({ reflect: true }) noLabel = false;\r\n\r\n  /**\r\n   * Define o estado de carregamento do componente.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\r\n\r\n  render() {\r\n    const { color, value, height, width, noLabel, loading } = this;\r\n\r\n    const percentage = (height * Math.min(Math.max(0, value), 100)) / 100;\r\n\r\n    let content;\r\n\r\n    if (loading) {\r\n      content = (\r\n        <div class=\"tp-chart-bar__container\">\r\n          {!noLabel && (\r\n            <ion-skeleton-text\r\n              class=\"tp-chart-bar__label-skeleton\"\r\n              animated\r\n            ></ion-skeleton-text>\r\n          )}\r\n          <ion-skeleton-text\r\n            class=\"tp-chart-bar__skeleton\"\r\n            animated\r\n          ></ion-skeleton-text>\r\n        </div>\r\n      );\r\n    } else {\r\n      content = (\r\n        <div class=\"tp-chart-bar__container\">\r\n          {!noLabel && (\r\n            <div class=\"tp-chart-bar__label\">\r\n              <slot></slot>\r\n            </div>\r\n          )}\r\n\r\n          <div class=\"tp-chart-bar__progress\"></div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Host\r\n        class={createColorClasses(color, {\r\n          'tp-chart-bar': true,\r\n          'tp-chart-bar--no-label': noLabel,\r\n          'tp-chart-bar--loading': loading,\r\n        })}\r\n        style={{\r\n          '--value': `${percentage}`,\r\n          '--height': `${height}`,\r\n          '--width': `${width}`,\r\n        }}\r\n      >\r\n        {content}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"]}