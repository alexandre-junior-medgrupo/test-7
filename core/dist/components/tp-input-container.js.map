{"file":"tp-input-container.js","mappings":";;;AAAA,MAAM,iBAAiB,GAAG,2lEAA2lE;;MCUxmEA,kBAAgB;;;;;QACnB,sBAAiB,GAAG,YAAY,CAAC,gCAAgC,CAAC,CAAC;QACnE,cAAS,GAAG,YAAY,CAAC,uBAAuB,CAAC,CAAC;;;;IAY1D,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,iBAAiB,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;QAC5D,IAAI,OAAO,CAAC;QAEZ,MAAM,IAAI,GAAG,KAAK,KAAK,OAAO,GAAG,iBAAiB,GAAG,SAAS,CAAC;QAE/D,IAAI,KAAK,EAAE;YACT,OAAO,IACL,WAAK,KAAK,EAAC,qCAAqC,IAC9C,gBACE,KAAK,EAAC,0BAA0B,EAChC,GAAG,EAAE,IAAI,iBACG,MAAM,GACR,CACR,CACP,CAAC;SACH;QAED,QACE,EAAC,IAAI,IACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,oBAAoB,EAAE,IAAI;gBAC1B,gCAAgC,EAAE,KAAK,KAAK,OAAO;gBACnD,kCAAkC,EAAE,KAAK,KAAK,SAAS;aACxD,CAAC,IAEF,YAAM,IAAI,EAAC,OAAO,GAAQ,EAC1B,WAAK,KAAK,EAAC,6BAA6B,IACtC,eAAa,EACZ,OAAO,CACJ,EACN,YAAM,IAAI,EAAC,kBAAkB,GAAQ,EACrC,YAAM,IAAI,EAAC,gBAAgB,GAAQ,CAC9B,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["TpInputContainer"],"sources":["src/components/templarios/input-container/input-container.scss?tag=tp-input-container&encapsulation=shadow","src/components/templarios/input-container/input-container.tsx"],"sourcesContent":[":host {\r\n  --border-color: transparent;\r\n  --background: var(--tp-color-neutral-2);\r\n}\r\n\r\n:host {\r\n  display: block;\r\n}\r\n\r\n.tp-input-container {\r\n  &__wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 8px 0;\r\n    background: var(--background);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: 8px;\r\n\r\n    &:hover {\r\n      --background: var(--tp-color-neutral-3);\r\n    }\r\n\r\n    &:focus-within {\r\n      --border-color: var(--tp-color-neutral-3);\r\n    }\r\n  }\r\n\r\n  &__state-container {\r\n    margin-right: 16px;\r\n  }\r\n}\r\n\r\n::slotted(*[slot='feedback-error']) {\r\n  display: none;\r\n  color: var(--tp-color-warning) !important;\r\n}\r\n\r\n::slotted(*[slot='feedback-success']) {\r\n  display: none;\r\n  color: var(--tp-color-success) !important;\r\n}\r\n\r\n//\r\n// states\r\n//\r\n\r\n//invalid\r\n//slloted\r\n:host(.tp-comparison-chart-bar--error) {\r\n  .tp-input-container__wrapper {\r\n    --border-color: var(--tp-color-warning);\r\n  }\r\n\r\n  ::slotted(*[slot=\"feedback-error\"]) {\r\n    display: block;\r\n  }\r\n\r\n  .tp-input-container__icon {\r\n    --stroke: var(--tp-color-warning);\r\n  }\r\n}\r\n\r\n//valid\r\n//slloted\r\n:host(.tp-comparison-chart-bar--success) {\r\n  .tp-input-container__wrapper {\r\n    --border-color: var(--tp-color-success);\r\n  }\r\n\r\n  ::slotted(*[slot=\"feedback-success\"]) {\r\n    display: block;\r\n  }\r\n\r\n  .tp-input-container__icon {\r\n    --stroke: var(--tp-color-success);\r\n  }\r\n}\r\n\r\n//\r\n// color\r\n//\r\n:host(.tp-color) {\r\n  .tp-input-container__wrapper {\r\n    --background: var(--tp-color-base);\r\n\r\n    &:hover {\r\n      --background: var(--tp-color-shade);\r\n    }\r\n\r\n    &:focus-within {\r\n      --border-color: var(--tp-color-tint);\r\n    }\r\n  }\r\n\r\n  // input\r\n  ::slotted(ion-input.sc-ion-input-md-h) {\r\n    --color: var(--tp-color-contrast) !important;\r\n    --placeholder-color: var(--tp-color-contrast) !important;\r\n  }\r\n\r\n  // clear-icon input\r\n  ::slotted(ion-input[clear-input]) {\r\n    --tp-fill-clear-icon: var(--tp-color-contrast) !important;\r\n  }\r\n\r\n  // searchbar\r\n  ::slotted(ion-searchbar.sc-ion-searchbar-md-h) {\r\n    --color: var(--tp-color-contrast) !important;\r\n    --placeholder-color: var(--tp-color-contrast) !important;\r\n    --tp-stroke-icon: var(--tp-color-contrast) !important;\r\n  }\r\n\r\n  // textarea\r\n  ::slotted(ion-textarea.sc-ion-textarea-md-h) {\r\n    --color: var(--tp-color-contrast) !important;\r\n    --placeholder-color: var(--tp-color-contrast) !important;\r\n  }\r\n}\r\n","import { createColorClasses } from '../../../utils/functions/color.function';\r\nimport { Component, Host, Prop, getAssetPath, h } from '@stencil/core';\r\nimport type { TpColor } from '../../../utils/types/color.type';\r\n\r\n@Component({\r\n  tag: 'tp-input-container',\r\n  styleUrl: 'input-container.scss',\r\n  assetsDirs: ['assets'],\r\n  shadow: true,\r\n})\r\nexport class TpInputContainer {\r\n  private alertTriangleIcon = getAssetPath('./assets/tp-alert-triangle.svg');\r\n  private CheckIcon = getAssetPath('./assets/tp-check.svg');\r\n\r\n  /**\r\n  * Define a variação de cor do componente.\r\n  */\r\n  @Prop({ reflect: true }) color?: TpColor;\r\n\r\n  /**\r\n   * Define a variação de estado do componente.\r\n   */\r\n  @Prop({ reflect: true }) state?: 'error' | 'success';\r\n\r\n  render() {\r\n    const { color, state, alertTriangleIcon, CheckIcon } = this;\r\n    let content;\r\n\r\n    const icon = state === 'error' ? alertTriangleIcon : CheckIcon;\r\n\r\n    if (state) {\r\n      content = (\r\n        <div class=\"tp-input-container__state-container\">\r\n          <ion-icon\r\n            class=\"tp-input-container__icon\"\r\n            src={icon}\r\n            aria-hidden=\"true\"\r\n          ></ion-icon>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Host\r\n        class={createColorClasses(color, {\r\n          'tp-input-container': true,\r\n          'tp-comparison-chart-bar--error': state === 'error',\r\n          'tp-comparison-chart-bar--success': state === 'success',\r\n        })}\r\n      >\r\n        <slot name=\"label\"></slot>\r\n        <div class=\"tp-input-container__wrapper\">\r\n          <slot></slot>\r\n          {content}\r\n        </div>\r\n        <slot name=\"feedback-success\"></slot>\r\n        <slot name=\"feedback-error\"></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}