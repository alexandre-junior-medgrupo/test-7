{"file":"tp-chart-bar.js","mappings":";;;AAAA,MAAM,WAAW,GAAG,y5CAAy5C;;MCUh6CA,YAAU;;;;;;qBASY,CAAC;sBAKA,EAAE;qBAKH,EAAE;uBAKA,KAAK;;;IAOxC,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAE/D,MAAM,UAAU,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC;QAEtE,IAAI,OAAO,CAAC;QAEZ,IAAI,OAAO,EAAE;YACX,OAAO,IACL,WAAK,KAAK,EAAC,yBAAyB,IACjC,CAAC,OAAO,KACP,yBACE,KAAK,EAAC,8BAA8B,EACpC,QAAQ,SACW,CACtB,EACD,yBACE,KAAK,EAAC,wBAAwB,EAC9B,QAAQ,SACW,CACjB,CACP,CAAC;SACH;aAAM;YACL,OAAO,IACL,WAAK,KAAK,EAAC,yBAAyB,IACjC,CAAC,OAAO,KACP,WAAK,KAAK,EAAC,qBAAqB,IAC9B,eAAa,CACT,CACP,EAED,WAAK,KAAK,EAAC,wBAAwB,GAAO,CACtC,CACP,CAAC;SACH;QAED,QACE,EAAC,IAAI,IACH,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC/B,cAAc,EAAE,IAAI;gBACpB,wBAAwB,EAAE,OAAO;gBACjC,uBAAuB,EAAE,OAAO;aACjC,CAAC,EACF,KAAK,EAAE;gBACL,SAAS,EAAE,GAAG,UAAU,EAAE;gBAC1B,UAAU,EAAE,GAAG,MAAM,EAAE;gBACvB,SAAS,EAAE,GAAG,KAAK,EAAE;aACtB,IAEA,OAAO,CACH,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["TpChartBar"],"sources":["src/components/templarios/chart-bar/chart-bar.scss?tag=tp-chart-bar&encapsulation=shadow","src/components/templarios/chart-bar/chart-bar.tsx"],"sourcesContent":["/**\r\n  * @prop --value: Propriedade definida dinamicamente. Define o valor do preenchimento do componente.\r\n  * @prop --width: Propriedade definida dinamicamente. Define a largura do componente.\r\n  * @prop --height: Propriedade definida dinamicamente. Define a altura do componente.\r\n*/\r\n\r\n:host {\r\n  --tp-skeleton-height: calc(var(--height) * 1px);\r\n  --tp-skeleton-width: calc(var(--width) * 1px);\r\n  --tp-skeleton-background-rgb: var(--tp-color-neutral-10-rgb);\r\n\r\n  display: block;\r\n  width: calc(var(--width) * 1px);\r\n  height: max-content;\r\n  color: var(--tp-color-neutral-10);\r\n  border-radius: 2px;\r\n}\r\n\r\n.tp-chart-bar {\r\n  &__container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100%;\r\n    height: calc(var(--height) + var(--height-label) * 1px);\r\n    overflow: hidden;\r\n    border-radius: 2px;\r\n  }\r\n\r\n  &__label {\r\n    display: flex;\r\n    margin-bottom: 6px;\r\n    transform: translateY(calc(var(--height) * 1px - var(--value) * 1px));\r\n  }\r\n\r\n  &__progress {\r\n    width: 100%;\r\n    height: calc(var(--height) * 1px);\r\n    background: var(--tp-color-brand-4);\r\n    border-radius: 2px;\r\n    animation: load-chart-bar forwards 400ms ease-in-out;\r\n  }\r\n\r\n  &__label-skeleton {\r\n    --background-rgb: var(--tp-skeleton-background-rgb);\r\n    --border-radius: 2px;\r\n    width: var(--tp-skeleton-width);\r\n    height: 12px;\r\n    margin: 0 0 6px;\r\n  }\r\n\r\n  &__skeleton {\r\n    --background-rgb: var(--tp-skeleton-background-rgb);\r\n    --border-radius: 2px;\r\n    width: var(--tp-skeleton-width);\r\n    height: var(--tp-skeleton-height);\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n//\r\n// no-label\r\n//\r\n:host(.tp-chart-bar--no-label) {\r\n  background: var(--tp-color-neutral-2);\r\n}\r\n\r\n//\r\n// loading\r\n//\r\n:host(.tp-chart-bar--loading) {\r\n  background: transparent;\r\n}\r\n\r\n//\r\n// color\r\n//\r\n:host(.tp-color) .tp-chart-bar__progress {\r\n  background: var(--tp-color-base);\r\n}\r\n\r\n//\r\n// animations\r\n//\r\n@keyframes load-chart-bar {\r\n  0% {\r\n    transform: translateY(calc(var(--height) * 1px));\r\n  }\r\n\r\n  100% {\r\n    transform: translateY(calc(var(--height) * 1px - var(--value) * 1px));\r\n  }\r\n}\r\n","import { Component, Host, Prop, h } from '@stencil/core';\nimport { createColorClasses } from '../../../utils/functions/color.function';\nimport type { TpColor } from '../../../utils/types/color.type';\n\n@Component({\n  tag: 'tp-chart-bar',\n  styleUrl: 'chart-bar.scss',\n  assetsDirs: ['assets'],\n  shadow: true,\n})\nexport class TpChartBar {\n  /**\n   * Define a variação de cor do componente.\n   */\n  @Prop({ reflect: true }) color?: TpColor;\n\n  /**\n   * Define o valor do preenchimento do componente.\n   */\n  @Prop({ reflect: true }) value = 0;\n\n  /**\n   * Define a altura do componente.\n   */\n  @Prop({ reflect: true }) height = 50;\n\n  /**\n   * Define a largura do componente.\n   */\n  @Prop({ reflect: true }) width = 32;\n\n  /**\n   * Define se o componente irá apresentar rótulo ou não.\n   */\n  @Prop({ reflect: true }) noLabel = false;\n\n  /**\n   * Define o estado de carregamento do componente.\n   */\n  @Prop({ reflect: true, mutable: true }) loading?: boolean;\n\n  render() {\n    const { color, value, height, width, noLabel, loading } = this;\n\n    const percentage = (height * Math.min(Math.max(0, value), 100)) / 100;\n\n    let content;\n\n    if (loading) {\n      content = (\n        <div class=\"tp-chart-bar__container\">\n          {!noLabel && (\n            <ion-skeleton-text\n              class=\"tp-chart-bar__label-skeleton\"\n              animated\n            ></ion-skeleton-text>\n          )}\n          <ion-skeleton-text\n            class=\"tp-chart-bar__skeleton\"\n            animated\n          ></ion-skeleton-text>\n        </div>\n      );\n    } else {\n      content = (\n        <div class=\"tp-chart-bar__container\">\n          {!noLabel && (\n            <div class=\"tp-chart-bar__label\">\n              <slot></slot>\n            </div>\n          )}\n\n          <div class=\"tp-chart-bar__progress\"></div>\n        </div>\n      );\n    }\n\n    return (\n      <Host\n        class={createColorClasses(color, {\n          'tp-chart-bar': true,\n          'tp-chart-bar--no-label': noLabel,\n          'tp-chart-bar--loading': loading,\n        })}\n        style={{\n          '--value': `${percentage}`,\n          '--height': `${height}`,\n          '--width': `${width}`,\n        }}\n      >\n        {content}\n      </Host>\n    );\n  }\n}\n"],"version":3}