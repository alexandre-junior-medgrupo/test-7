@use 'sass:math';

@mixin tp-generate-color-neutral-properties() {
  @for $i from 1 through 10 {
    $luminosity-multiplier: if($i == 1, 0, $i - 1);
    $luminosity-step: $luminosity-multiplier * 10%;

    --tp-color-neutral-#{$i}: var(--tp-color-neutral-hue),
      var(--tp-color-neutral-saturation),
      calc(
        var(--tp-color-neutral-luminosity) +
          #{$luminosity-step} *
          var(--tp-color-neutral-invert)
      );

    @if $i != 10 {
      --tp-color-neutral-#{$i}5: var(--tp-color-neutral-hue),
        var(--tp-color-neutral-saturation),
        calc(
          var(--tp-color-neutral-alternative-luminosity) +
            #{$luminosity-step} *
            var(--tp-color-neutral-invert)
        );
    }
  }
}

@mixin tp-generate-color-properties($color) {
  --tp-color-#{$color}: var(--tp-color-#{$color}-hue),
    var(--tp-color-#{$color}-saturation, var(--tp-color-saturation)),
    var(--tp-color-#{$color}-luminosity-3, var(--tp-color-luminosity-3));

  @for $i from 1 through 5 {
    --tp-color-#{$color}-#{$i}: var(--tp-color-#{$color}-hue),
      var(--tp-color-#{$color}-saturation, var(--tp-color-saturation)),
      var(
        --tp-color-#{$color}-luminosity-#{$i},
        var(--tp-color-luminosity-#{$i})
      );
  }

  --tp-color-contrast-fixed: var(--tp-color-neutral-10);
}

@mixin tp-generate-color-feedback-properties($color) {
  --tp-color-#{$color}: var(--tp-color-feedback-#{$color}-hue),
    var(--tp-color-#{$color}-saturation, var(--tp-color-feedback-saturation)),
    var(--tp-color-#{$color}-luminosity, var(--tp-color-feedback-luminosity));
}

@mixin tp-generate-ionic-color-neutral-classes() {
  @for $i from 1 through 10 {
    .ion-color-neutral-#{$i} {
      --ion-color-base: hsl(var(--tp-color-neutral-#{$i})) !important;
      --ion-color-base-rgb: var(--tp-color-neutral-#{$i}) !important;
      --ion-color-contrast: #{if(
          $i <= 5,
          hsl(var(--tp-color-neutral-10)),
          hsl(var(--tp-color-neutral-1))
        )} !important;
      // --ion-color-shade: ;
      // --ion-color-tint: ;
    }

    @if $i != 10 {
      .ion-color-neutral-#{$i}5 {
        --ion-color-base: hsl(var(--tp-color-neutral-#{$i}5)) !important;
        --ion-color-base-rgb: var(--tp-color-neutral-#{$i}5) !important;
        --ion-color-contrast: #{if(
            $i <= 5,
            hsl(var(--tp-color-neutral-10)),
            hsl(var(--tp-color-neutral-1))
          )} !important;
        // --ion-color-shade: ;
        // --ion-color-tint: ;
      }
    }
  }
}

/* stylelint-disable max-nesting-depth */
@mixin tp-generate-ionic-color-classes($color) {
  .ion-color-#{$color} {
    --ion-color-base: hsl(var(--tp-color-#{$color})) !important;
    --ion-color-base-rgb: var(--tp-color-#{$color}) !important;
    --ion-color-contrast: var(--tp-color-contrast-fixed);

    // --ion-color-shade: ;
    // --ion-color-tint: ;
  }

  @for $i from 1 through 5 {
    .ion-color-#{$color}-#{$i} {
      --ion-color-base: hsl(var(--tp-color-#{$color}-#{$i}));
      --ion-color-base-rgb: var(--tp-color-#{$color}-#{$i});

      @if $i == 3 {
        --ion-color-contrast: var(--tp-color-contrast-fixed);
      } @else if $i <= 2 {
        --ion-color-contrast: var(--tp-color-neutral-10);
      } @else {
        --ion-color-contrast: var(--tp-color-neutral-1);
      }

      // --ion-color-shade: ;
      // --ion-color-tint: ;
    }
  }
}
/* stylelint-enable max-nesting-depth */

@mixin tp-generate-ionic-color-feedback-classes($color) {
  .ion-color-#{$color} {
    --ion-color-base: hsl(var(--tp-color-#{$color})) !important;
    --ion-color-base-rgb: var(--tp-color-#{$color}) !important;
    --ion-color-contrast: hsl(var(--tp-color-neutral-1)) !important;
    // --ion-color-shade: ;
    // --ion-color-tint: ;
  }
}
