@use 'sass:math';
@use '../variables/base.variables';

@mixin generate-color-properties($color) {
  --#{base.$namespace}-color-#{$color}: var(--#{base.$namespace}-color-#{$color}-hue), var(--#{base.$namespace}-color-saturation), var(--#{base.$namespace}-color-luminosity-3);

  @for $i from 1 through 5 {
    --#{base.$namespace}-color-#{$color}-#{$i}: var(--#{base.$namespace}-color-#{$color}-hue), var(--#{base.$namespace}-color-saturation), var(--#{base.$namespace}-color-luminosity-#{$i});
  }
}

@mixin generate-color-neutral-properties() {
  @for $i from 1 through 10 {
    $luminosity-multiplier: if($i == 1, 0, $i - 1);
    $luminosity-step: $luminosity-multiplier * 10%;

    --#{base.$namespace}-color-neutral-#{$i}: var(--#{base.$namespace}-color-neutral-hue), var(--#{base.$namespace}-color-neutral-saturation), calc(var(--#{base.$namespace}-color-neutral-luminosity) + #{$luminosity-step});

    @if $i != 10 {
      --#{base.$namespace}-color-neutral-#{$i}5: var(--#{base.$namespace}-color-neutral-hue), var(--#{base.$namespace}-color-neutral-saturation), calc(var(--#{base.$namespace}-color-neutral-alternative-luminosity) + #{$luminosity-step} * var(--#{base.$namespace}-color-neutral-invert));
    }
  }
}

@mixin generate-color-feedback-properties($color) {
  --#{base.$namespace}-color-feedback-#{$color}: var(--#{base.$namespace}-color-feedback-#{$color}-hue), var(--#{base.$namespace}-color-feedback-saturation), var(--#{base.$namespace}-color-feedback-luminosity);
}

@mixin generate-ionic-color-classes($color) {
  .ion-color-#{$color} {
    --ion-color-base: hsl(var(--#{base.$namespace}-color-#{$color}));
    --ion-color-base-rgb: var(--#{base.$namespace}-color-#{$color});
    --ion-color-contrast: hsl(var(--#{base.$namespace}-color-neutral-10));
    // --ion-color-shade: ;
    // --ion-color-tint: ;
  }

  @for $i from 1 through 5 {
    .ion-color-#{$color}-#{$i} {
      --ion-color-base: hsl(var(--#{base.$namespace}-color-#{$color}-#{$i}));
      --ion-color-base-rgb: var(--#{base.$namespace}-color-#{$color}-#{$i});
      --ion-color-contrast: #{if($i <= 3, hsl(var(--#{base.$namespace}-color-neutral-10)), hsl(var(--#{base.$namespace}-color-neutral-1)))};
      // --ion-color-shade: ;
      // --ion-color-tint: ;
    }
  }
}

@mixin generate-ionic-color-neutral-classes() {
  @for $i from 1 through 10 {
    .ion-color-neutral-#{$i} {
      --ion-color-base: hsl(var(--#{base.$namespace}-color-neutral-#{$i}));
      --ion-color-base-rgb: var(--#{base.$namespace}-color-neutral-#{$i});
      --ion-color-contrast: #{if($i <= 5, hsl(var(--#{base.$namespace}-color-neutral-10)), hsl(var(--#{base.$namespace}-color-neutral-1)))};
      // --ion-color-shade: ;
      // --ion-color-tint: ;
    }

    @if $i != 10 {
      .ion-color-neutral-#{$i}5 {
        --ion-color-base: hsl(var(--#{base.$namespace}-color-neutral-#{$i}5));
        --ion-color-base-rgb: var(--#{base.$namespace}-color-neutral-#{$i}5);
        --ion-color-contrast: #{if($i <= 5, hsl(var(--#{base.$namespace}-color-neutral-10)), hsl(var(--#{base.$namespace}-color-neutral-1)))};
        // --ion-color-shade: ;
        // --ion-color-tint: ;
      }
    }
  }
}

@mixin generate-ionic-color-feedback-classes($color) {
  .ion-color-#{$color} {
    --ion-color-base: hsl(var(--#{base.$namespace}-color-feedback-#{$color}));
    --ion-color-base-rgb: var(--#{base.$namespace}-color-feedback-#{$color});
    --ion-color-contrast: hsl(var(--#{base.$namespace}-color-neutral-1));
    // --ion-color-shade: ;
    // --ion-color-tint: ;
  }
}
