/* stylelint-disable max-nesting-depth */
/* stylelint-disable  at-rule-disallowed-list */

@use 'sass:color';
@use 'sass:map';
@use 'sass:list';

@use 'sass:math';

@function rgb-list($color) {
  @return #{red($color)}, #{green($color)}, #{blue($color)};
}

$brand-1: hsl(188, 80%, 20%);
$brand-1-light: hsl(188, 40%, 80%);

$neutral-1: hsl(188, 10%, 8%);
$neutral-10: hsl(188, 10%, 98%);
$neutral-15: hsl(188, 10%, 13%);
$neutral-95: hsl(188, 10%, 93%);

$feedback-default: (
  attention: hsl(44, 80%, 65%),
  caution: hsl(24, 80%, 65%),
  warning: hsl(4, 80%, 65%),
  success: hsl(128, 80%, 65%),
);
$feedback-light: (
  attention: hsl(44, 80%, 45%),
  caution: hsl(24, 80%, 45%),
  warning: hsl(4, 80%, 45%),
  success: hsl(128, 80%, 35%),
);

//
// themes
//

$themes: (
  medsoft: (
    medsoft-1: (
      aula: hsl(168, 80%, 20%),
      material: hsl(24, 80%, 20%),
      questoes: hsl(200, 80%, 20%),
      revalida: hsl(342, 80%, 20%),
      provas: hsl(268, 80%, 20%),
    ),
    medsoft-1-light: (
      aula: hsl(168, 40%, 80%),
      material: hsl(24, 40%, 80%),
      questoes: hsl(200, 40%, 80%),
      revalida: hsl(342, 40%, 80%),
      provas: hsl(268, 40%, 80%),
    ),
  ),
  recursos: (
    recursos-1: (
      brand: hsl(195, 80%, 20%),
      'orange': hsl(25, 80%, 20%),
    ),
    recursos-1-light: (
      brand: hsl(195, 40%, 80%),
      'orange': hsl(25, 40%, 80%),
    ),
  ),
  cpmed: (
    cpmed-1: (
      brand: hsl(12, 80%, 20%),
    ),
    cpmed-1-light: (
      brand: hsl(12, 40%, 80%),
    ),
  ),
  cpvent: (
    cpvent-1: (
      brand: hsl(72, 80%, 20%),
    ),
    cpvent-1-light: (
      brand: hsl(72, 40%, 80%),
    ),
  ),
  extensivo-rmais: (
    extensivo-rmais-1: (
      brand: hsl(300, 80%, 20%),
    ),
    extensivo-rmais-1-light: (
      brand: hsl(300, 40%, 80%),
    ),
  ),
  extensivo: (
    extensivo-1: (
      brand: hsl(128, 80%, 20%),
    ),
    extensivo-1-light: (
      brand: hsl(128, 40%, 80%),
    ),
  ),
  intensivao: (
    intensivao-1: (
      brand: hsl(344, 80%, 20%),
    ),
    intensivao-1-light: (
      brand: hsl(344, 40%, 80%),
    ),
  ),
  medeletro: (
    medeletro-1: (
      brand: hsl(180, 80%, 20%),
    ),
    medeletro-1-light: (
      brand: hsl(180, 40%, 80%),
    ),
  ),
  medmaster: (
    medmaster-1: (
      brand: hsl(56, 80%, 20%),
    ),
    medmaster-1-light: (
      brand: hsl(56, 40%, 80%),
    ),
  ),
  no-papo: (
    no-papo-1: (
      brand: hsl(230, 80%, 20%),
    ),
    no-papo-1-light: (
      brand: hsl(230, 40%, 80%),
    ),
  ),
  ventilamed: (
    ventilamed-1: (
      brand: hsl(29, 80%, 20%),
    ),
    ventilamed-1-light: (
      brand: hsl(29, 40%, 80%),
    ),
  ),
);

$color-system-frameworks: ionic, templarios;

// @mixin generate-neutral-properties($hsl, $invert: null);
// @param $hsl: hsl color
// @param $invert?: boolean
//
// @examples:
// $neutral-1: hsl(188, 10%, 8%);
// @include generate-neutral-properties($neutral-1);
//
// $neutral-10: hsl(188, 10%, 98%);
// @include generate-neutral-properties($neutral-10, true);
@mixin generate-neutral-properties($hsl, $invert: null) {
  $hue: color.hue($hsl);
  $saturation: color.saturation($hsl);
  $lightness: color.lightness($hsl);

  @for $i from 1 through 10 {
    $lightness-multiplier: if($i == 1, 0, $i - 1);
    $lightness-multiplier-value: $lightness-multiplier * 10%;
    $lightness-step: if(
      $invert,
      $lightness-multiplier-value * -1,
      $lightness-multiplier-value
    );

    $base: hsl($hue, $saturation, $lightness + $lightness-step);
    $shade: hsl($hue, $saturation, ($lightness + $lightness-step) - 5%);
    $tint: hsl($hue, $saturation, ($lightness + $lightness-step) + 5%);

    --tp-color-neutral-#{$i}: #{$base};
    --tp-color-neutral-#{$i}-rgb: #{rgb-list($base)};
    --tp-color-neutral-#{$i}-shade: #{$shade};
    --tp-color-neutral-#{$i}-tint: #{$tint};
  }
}

// @mixin generate-neutral-alternative-properties($hsl, $invert: null);
// @param $hsl: hsl color
// @param $invert?: boolean
//
// @examples:
// $neutral-15: hsl(188, 10%, 13%);
// @include generate-neutral-alternative-properties($neutral-15);
//
// $neutral-95: hsl(188, 10%, 93%);
// @include generate-neutral-alternative-properties($neutral-95, true);
@mixin generate-neutral-alternative-properties($hsl, $invert: null) {
  $hue: color.hue($hsl);
  $saturation: color.saturation($hsl);
  $lightness: color.lightness($hsl);

  @for $i from 1 through 9 {
    $lightness-multiplier: if($i == 1, 0, $i - 1);
    $lightness-multiplier-value: $lightness-multiplier * 10%;
    $lightness-step: if(
      $invert,
      $lightness-multiplier-value * -1,
      $lightness-multiplier-value
    );

    $base: hsl($hue, $saturation, $lightness + $lightness-step);
    $shade: hsl($hue, $saturation, ($lightness + $lightness-step) - 5%);
    $tint: hsl($hue, $saturation, ($lightness + $lightness-step) + 5%);

    --tp-color-neutral-#{$i}5: #{$base};
    --tp-color-neutral-#{$i}5-rgb: #{rgb-list($base)};
    --tp-color-neutral-#{$i}5-shade: #{$shade};
    --tp-color-neutral-#{$i}5-tint: #{$tint};
  }
}

// @mixin generate-color-properties($name, $hsl, $invert: null);
// @param $name: string
// @param $hsl: hsl color
// @param $invert?: boolean
//
// @examples:
// $brand-1: hsl(188, 80%, 20%);
// @include generate-color-properties(brand, $brand-1);
//
// $brand-1-light: hsl(188, 40%, 80%);
// @include generate-color-properties(brand, $brand-1-light, true);
@mixin generate-color-properties($name, $hsl, $invert: null) {
  $hue: color.hue($hsl);
  $saturation: color.saturation($hsl);
  $lightness: color.lightness($hsl);

  $base: hsl($hue, $saturation, 40%);
  $shade: hsl($hue, $saturation, 40% - 5%);
  $tint: hsl($hue, $saturation, 40% + 5%);

  --tp-color-contrast-fixed: #{$neutral-10};
  --tp-color-contrast-fixed-rgb: #{rgb-list($neutral-10)};

  --tp-color-#{$name}: #{$base};
  --tp-color-#{$name}-rgb: #{rgb-list($base)};
  --tp-color-#{$name}-shade: #{$shade};
  --tp-color-#{$name}-tint: #{$tint};

  @for $i from 1 through 5 {
    @if $i <= 3 {
      $lightness-multiplier: if($i == 1, 0, $i - 1);
      $lightness-multiplier-value: $lightness-multiplier * 10%;
      $lightness-step: if(
        $invert,
        $lightness-multiplier-value * -1,
        $lightness-multiplier-value
      );

      $base: hsl($hue, $saturation, $lightness + $lightness-step);
      $shade: hsl($hue, $saturation, ($lightness + $lightness-step) - 5%);
      $tint: hsl($hue, $saturation, ($lightness + $lightness-step) + 5%);

      --tp-color-#{$name}-#{$i}: #{$base};
      --tp-color-#{$name}-#{$i}-rgb: #{rgb-list($base)};
      --tp-color-#{$name}-#{$i}-shade: #{$shade};
      --tp-color-#{$name}-#{$i}-tint: #{$tint};
    } @else {
      $lightness-multiplier: if($i == 4, $i, $i + 1);
      $lightness-multiplier-value: $lightness-multiplier * 10%;
      $lightness-step: if(
        $invert,
        $lightness-multiplier-value * -1,
        $lightness-multiplier-value
      );

      $base: hsl($hue, $saturation, $lightness + $lightness-step);
      $shade: hsl($hue, $saturation, ($lightness + $lightness-step) - 5%);
      $tint: hsl($hue, $saturation, ($lightness + $lightness-step) + 5%);

      --tp-color-#{$name}-#{$i}: #{$base};
      --tp-color-#{$name}-#{$i}-rgb: #{rgb-list($base)};
      --tp-color-#{$name}-#{$i}-shade: #{$shade};
      --tp-color-#{$name}-#{$i}-tint: #{$tint};
    }
  }
}

// @mixin generate-feedback-properties($name, $hsl, $invert: null);
// @param $name: string
// @param $hsl: hsl color
// @param $invert?: boolean
//
// @examples:
// $attention-default: hsl(44, 80%, 65%);
// @include generate-feedback-properties(attention, $attention-default);
//
// $attention-light: hsl(44, 80%, 45%);
// @include generate-feedback-properties(attention, $attention-light, true);
@mixin generate-feedback-properties($name, $hsl, $invert: null) {
  $hue: color.hue($hsl);
  $saturation: color.saturation($hsl);
  $lightness: color.lightness($hsl);

  $base: hsl($hue, $saturation, $lightness);
  $shade: hsl($hue, $saturation, $lightness - 5%);
  $tint: hsl($hue, $saturation, $lightness + 5%);

  --tp-color-#{$name}: #{$base};
  --tp-color-#{$name}-rgb: #{rgb-list($base)};
  --tp-color-#{$name}-shade: #{$shade};
  --tp-color-#{$name}-tint: #{$tint};
}

:root {
  @include generate-neutral-properties($neutral-1);
  @include generate-neutral-alternative-properties($neutral-15);
  @include generate-color-properties(brand, $brand-1);
  @each $name, $value in $feedback-default {
    @include generate-feedback-properties($name, $value);
  }
}

.tp-color-scheme-light {
  @include generate-neutral-properties($neutral-10, true);
  @include generate-neutral-alternative-properties($neutral-95, true);
  @include generate-color-properties(brand, $brand-1-light, true);
  @each $name, $value in $feedback-light {
    @include generate-feedback-properties($name, $value, true);
  }
}

// @include generate-neutral-classes($framework);
// @param $framework: ionic | templarios
@mixin generate-neutral-classes($framework) {
  @if not list.index($color-system-frameworks, $framework) {
    @error "#{$framework} não é um framework válido. Utilize uma das variações: #{$color-system-frameworks}.";
  }

  $namespace: if($framework == ionic, ion, tp);

  @for $i from 1 through 10 {
    .#{$namespace}-color-neutral-#{$i} {
      --#{$namespace}-color-base: var(--tp-color-neutral-#{$i}) !important;
      --#{$namespace}-color-base-rgb: var(
        --tp-color-neutral-#{$i}-rgb
      ) !important;
      --#{$namespace}-color-contrast: #{if(
          $i <= 5,
          var(--tp-color-neutral-10),
          var(--tp-color-neutral-1)
        )} !important;
      --#{$namespace}-color-contrast-rgb: #{if(
          $i <= 5,
          var(--tp-color-neutral-10-rgb),
          var(--tp-color-neutral-1-rgb)
        )} !important;
      --#{$namespace}-color-shade: var(
        --tp-color-neutral-#{$i}-shade
      ) !important;
      --#{$namespace}-color-tint: var(--tp-color-neutral-#{$i}-tint) !important;
    }

    @if $i != 10 {
      .#{$namespace}-color-neutral-#{$i}5 {
        --#{$namespace}-color-base: var(--tp-color-neutral-#{$i}5) !important;
        --#{$namespace}-color-base-rgb: var(
          --tp-color-neutral-#{$i}5-rgb
        ) !important;
        --#{$namespace}-color-contrast: #{if(
            $i <= 5,
            var(--tp-color-neutral-10),
            var(--tp-color-neutral-1)
          )} !important;
        --#{$namespace}-color-contrast-rgb: #{if(
            $i <= 5,
            var(--tp-color-neutral-10-rgb),
            var(--tp-color-neutral-1-rgb)
          )} !important;
        --#{$namespace}-color-shade: var(
          --tp-color-neutral-#{$i}5-shade
        ) !important;
        --#{$namespace}-color-tint: var(
          --tp-color-neutral-#{$i}5-tint
        ) !important;
      }
    }
  }
}

// @include generate-color-classes($name, $framework);
// @param $name: string
// @param $framework: ionic | templarios
@mixin generate-color-classes($name, $framework) {
  @if not list.index($color-system-frameworks, $framework) {
    @error "#{$framework} não é um framework válido. Utilize uma das variações: #{$color-system-frameworks}.";
  }

  $namespace: if($framework == ionic, ion, tp);

  .#{$namespace}-color-#{$name} {
    --#{$namespace}-color-base: var(--tp-color-#{$name}) !important;
    --#{$namespace}-color-base-rgb: var(--tp-color-base-rgb) !important;
    --#{$namespace}-color-contrast: var(--tp-color-contrast-fixed) !important;
    --#{$namespace}-color-contrast-rgb: var(
      --tp-color-contrast-fixed-rgb
    ) !important;
    --#{$namespace}-color-shade: var(--tp-color-#{$name}-shade) !important;
    --#{$namespace}-color-tint: var(--tp-color-#{$name}-tint) !important;
  }

  @for $i from 1 through 5 {
    .#{$namespace}-color-#{$name}-#{$i} {
      --#{$namespace}-color-base: var(--tp-color-#{$name}-#{$i}) !important;
      --#{$namespace}-color-base-rgb: var(
        --tp-color-#{$name}-#{$i}-rgb
      ) !important;

      @if $i == 3 {
        --#{$namespace}-color-contrast: var(
          --tp-color-contrast-fixed
        ) !important;
        --#{$namespace}-color-contrast-rgb: var(
          --tp-color-contrast-fixed-rgb
        ) !important;
      } @else if $i <= 2 {
        --#{$namespace}-color-contrast: var(--tp-color-neutral-10) !important;
        --#{$namespace}-color-contrast-rgb: var(
          --tp-color-neutral-10-rgb
        ) !important;
      } @else {
        --#{$namespace}-color-contrast: var(--tp-color-neutral-1) !important;
        --#{$namespace}-color-contrast-rgb: var(
          --tp-color-neutral-1-rgb
        ) !important;
      }

      --#{$namespace}-color-shade: var(
        --tp-color-#{$name}-#{$i}-shade
      ) !important;
      --#{$namespace}-color-tint: var(
        --tp-color-#{$name}-#{$i}-tint
      ) !important;
    }
  }
}

// @include generate-feedback-classes($name, $framework);
// @param $name: string
// @param $framework: ionic | templarios
@mixin generate-feedback-classes($name, $framework) {
  @if not list.index($color-system-frameworks, $framework) {
    @error "#{$framework} não é um framework válido. Utilize uma das variações: #{$color-system-frameworks}.";
  }

  $namespace: if($framework == ionic, ion, tp);

  .#{$namespace}-color-#{$name} {
    --#{$namespace}-color-base: var(--tp-color-#{$name}) !important;
    --#{$namespace}-color-base-rgb: var(--tp-color-#{$name}-rgb) !important;
    --#{$namespace}-color-contrast: var(--tp-color-neutral-10) !important;
    --#{$namespace}-color-contrast-rgb: var(
      --tp-color-neutral-10-rgb
    ) !important;
    --#{$namespace}-color-shade: var(--tp-color-#{$name}-shade) !important;
    --#{$namespace}-color-tint: var(--tp-color-#{$name}-tint) !important;
  }
}

@include generate-neutral-classes(ionic);
@include generate-neutral-classes(templarios);
@include generate-color-classes(brand, ionic);
@include generate-color-classes(brand, templarios);
@each $name, $value in $feedback-default {
  @include generate-feedback-classes($name, ionic);
  @include generate-feedback-classes($name, templarios);
}

//
// themes
//
.tp-color-theme {
  @each $theme-name, $theme-value in $themes {
    &-#{$theme-name} {
      $variation-map: map.get($theme-value, #{$theme-name}-1);

      @each $variation-name, $variation-value in $variation-map {
        @include generate-color-properties($variation-name, $variation-value);
      }
    }
  }
}

.tp-color-scheme-light {
  &.tp-color-theme {
    @each $theme-name, $theme-value in $themes {
      &-#{$theme-name} {
        $variation-map: map.get($theme-value, #{$theme-name}-1-light);

        @each $variation-name, $variation-value in $variation-map {
          @include generate-color-properties(
            $variation-name,
            $variation-value,
            true
          );
        }
      }
    }
  }
}
