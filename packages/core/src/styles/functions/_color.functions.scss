/* stylelint-disable max-nesting-depth */

@use 'sass:list';
@use '../variables/theme.variables';

// @function tp-color($color, $variation: null, $opacity: null);
// @param $color: string
// @param $variation: number
// @param $opacity: number
// @param $type: shade | tint
//
// @examples:
// tp-color(brand) @returns: var(--tp-color-brand);
// tp-color(brand, 5) @returns: var(--tp-color-brand-5);
// tp-color(brand, 5, 0.5) @returns: rgba(var(--tp-color-brand-5), 0.5);
//
// tp-color(brand, tint) @returns: var(--tp-color-brand-tint);
// tp-color(brand, 5, null, tint) @returns: var(--tp-color-brand-5-tint);
// tp-color(brand, 5, 0.5, tint) @returns: rgba(var(--tp-color-brand-5-tint), 0.5);
@function tp-color($name, $variation: null, $opacity: null, $type: null) {
  @if not list.index(theme.$tp-color-system-names, $name) {
    @error "#{$name} não é um nome valido. Utilize uma das variações: #{theme.$tp-color-system-names}.";
  }

  // TODO: testar se name é $tp-color-names e variação diferente de null => 5
  @if list.index(theme.$tp-color-names, $name) and
    list.index(theme.$tp-color-variation, $variation)
  {
  }

  // TODO: testar se name é neutral e variação diferente de 10 => 95
  @if list.index(theme.$tp-color-names, $name) and
    list.index(theme.$tp-color-variation, $variation)
  {
  }

  // TODO: testar se name é $tp-feedback-colors
  @if list.index(theme.$tp-color-names, $name) and
    list.index(theme.$tp-color-variation, $variation)
  {
  }

  @if ($type) {
    @if not list.index(theme.$tp-color-variation-types, $type) {
      @error "#{$type} não é um tipo valido. Use uma das variações: #{theme.$tp-color-variation-types}.";
    }

    @if ($opacity) {
      @return if(
        $variation,
        rgba(var(--tp-color-#{$name}-#{$variation}-#{$type}), $opacity),
        rgba(var(--tp-color-#{$name}-#{$type}), $opacity)
      );
    }

    @return if(
      $variation,
      var(--tp-color-#{$name}-#{$variation}-#{$type}),
      var(--tp-color-#{$name}-#{$type})
    );
  }

  @if ($opacity) {
    @return if(
      $variation,
      rgba(var(--tp-color-#{$name}-#{$variation}), $opacity),
      rgba(var(--tp-color-#{$name}), $opacity)
    );
  }

  @return if(
    $variation,
    var(--tp-color-#{$name}-#{$variation}),
    var(--tp-color-#{$name})
  );
}

// @function tp-color-contrast($type, $variation: null, $variation-type: null);
// @param $type: color | neutral | feedback
// @param $variation: number
// @param $color: neutral | alternative
//
// @examples:
// tp-color-contrast(color); @returns: var(--tp-color-contrast-fixed);
// tp-color-contrast(color, 3); @returns: var(--tp-color-contrast-fixed);
// tp-color-contrast(color, 2); @returns: var(--tp-color-neutral-10);
// tp-color-contrast(color, 4); @returns: var(--tp-color-neutral-1);
//
// tp-color-contrast(feedback); @returns: var(--tp-color-neutral-1);
//
// tp-color-contrast(neutral, 5, neutral); @returns: var(--tp-color-neutral-10);
// tp-color-contrast(neutral, 6, neutral); @returns: var(--tp-color-neutral-1);
// tp-color-contrast(neutral, 55, alternative); @returns: returns: var(--tp-color-neutral-10);
// tp-color-contrast(neutral, 65, alternative); @returns: returns: var(--tp-color-neutral-1);
@function tp-color-contrast($type, $variation: null, $variation-type: null) {
  @if not list.index(theme.$tp-color-system-types, $type) {
    @error "#{$type} não é um tipo valido. Utilize uma das variações: #{theme.$tp-color-system-types}.";
  }

  @if $type == color {
    @if $variation-type {
      @warn "#{$type} não possui variações de $variation-type.";
    }

    @if not $variation or $variation == 3 {
      @return var(--tp-color-contrast-fixed);
    }

    @if $variation {
      @if not list.index(theme.$tp-color-variation, $variation) {
        @error "#{$variation} não é uma variação válida. Utilize uma das variações: #{theme.$tp-color-variation}.";
      }

      @if $variation <= 2 {
        @return var(--tp-color-neutral-10);
      } @else {
        @return var(--tp-color-neutral-1);
      }
    }
  }

  @if $type == feedback {
    @if $variation or $variation-type {
      @warn "#{$type} não possui variações de $variation ou $variation-type.";
    }

    @return var(--tp-color-neutral-1);
  }

  @if $type == neutral {
    @if not $variation-type {
      @error "Utilize uma das variações: neutral, alternative";
    }

    @if $variation-type == neutral {
      @if not list.index(theme.$tp-neutral-variation, $variation) {
        @error "#{$variation} não é uma variação válida de 'neutral'. Utilize uma das variações: #{theme.$tp-neutral-variation}.";
      }

      @return if(
        $variation <= 5,
        var(--tp-color-neutral-10),
        var(--tp-color-neutral-1)
      );
    }

    @if $variation-type == alternative {
      @if not list.index(theme.$tp-neutral-alternative-variation, $variation) {
        @error "#{$variation} não é uma variação válida de 'alternative'. Utilize uma das variações: #{theme.$tp-neutral-alternative-variation}.";
      }

      @return if(
        $variation <= 55,
        var(--tp-color-neutral-10),
        var(--tp-color-neutral-1)
      );
    }
  }
}

// @function tp-color-current($type);
// @param $type: base | contrast | shade | tint
//
// @examples:
// tp-color-current(base); @returns: var(--tp-color-base);
// tp-color-current(contrast); @returns: var(--tp-color-contrast);
// tp-color-current(shade); @returns: var(--tp-color-shade);
// tp-color-current(tint); @returns: var(--tp-color-tint);
@function tp-color-current($type) {
  @if not list.index(theme.$tp-color-current-types, $type) {
    @error "#{$type} não é um tipo valido. Utilize uma das variações: #{theme.$tp-color-current-types}.";
  }

  @return var(--tp-color-#{$type});
}
