/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TpColor } from "./utils/types/color.type";
import { TpAlertType } from "./components/templarios/alert/alert.type";
import { TpRateLikeType } from "./components/templarios/rate-like/rate-like.type";
export { TpColor } from "./utils/types/color.type";
export { TpAlertType } from "./components/templarios/alert/alert.type";
export { TpRateLikeType } from "./components/templarios/rate-like/rate-like.type";
export namespace Components {
    interface TpAlert {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o icon a ser exibido no componente.
         */
        "icon": string;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define a string a ser exibida no componente.
         */
        "message": string;
        /**
          * Define a variação de estado do componente.
         */
        "state"?: TpAlertType['state'];
    }
    interface TpChartBar {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a altura do componente.
         */
        "height": number;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define se o componente irá apresentar rótulo ou não.
         */
        "noLabel": boolean;
        /**
          * Define o valor do preenchimento do componente.
         */
        "value": number;
        /**
          * Define a largura do componente.
         */
        "width": number;
    }
    interface TpComparisonChartBar {
        /**
          * Define o preenchimento da coluna em porcentagem.
         */
        "barValue": number;
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a altura máxima da coluna.
         */
        "containerHeight": number;
        /**
          * Define a estilização do estado disabled do componente.
         */
        "disabled": boolean;
        /**
          * Define se o componente terá um marcador.
         */
        "hasMarker": boolean;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define a posição, em porcentagem, do marcador na coluna.
         */
        "markerValue": number;
        /**
          * Define se o componente não terá rótulo.
         */
        "noLabel": boolean;
    }
    interface TpInputContainer {
        /**
          * Define a variação de estado do componente.
         */
        "state"?: 'error' | 'success';
    }
    interface TpRateLike {
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define o status do componente.
         */
        "status"?: TpRateLikeType['status'];
    }
}
export interface TpRateLikeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTpRateLikeElement;
}
declare global {
    interface HTMLTpAlertElement extends Components.TpAlert, HTMLStencilElement {
    }
    var HTMLTpAlertElement: {
        prototype: HTMLTpAlertElement;
        new (): HTMLTpAlertElement;
    };
    interface HTMLTpChartBarElement extends Components.TpChartBar, HTMLStencilElement {
    }
    var HTMLTpChartBarElement: {
        prototype: HTMLTpChartBarElement;
        new (): HTMLTpChartBarElement;
    };
    interface HTMLTpComparisonChartBarElement extends Components.TpComparisonChartBar, HTMLStencilElement {
    }
    var HTMLTpComparisonChartBarElement: {
        prototype: HTMLTpComparisonChartBarElement;
        new (): HTMLTpComparisonChartBarElement;
    };
    interface HTMLTpInputContainerElement extends Components.TpInputContainer, HTMLStencilElement {
    }
    var HTMLTpInputContainerElement: {
        prototype: HTMLTpInputContainerElement;
        new (): HTMLTpInputContainerElement;
    };
    interface HTMLTpRateLikeElementEventMap {
        "tpChange": TpRateLikeType['status'];
    }
    interface HTMLTpRateLikeElement extends Components.TpRateLike, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTpRateLikeElementEventMap>(type: K, listener: (this: HTMLTpRateLikeElement, ev: TpRateLikeCustomEvent<HTMLTpRateLikeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTpRateLikeElementEventMap>(type: K, listener: (this: HTMLTpRateLikeElement, ev: TpRateLikeCustomEvent<HTMLTpRateLikeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTpRateLikeElement: {
        prototype: HTMLTpRateLikeElement;
        new (): HTMLTpRateLikeElement;
    };
    interface HTMLElementTagNameMap {
        "tp-alert": HTMLTpAlertElement;
        "tp-chart-bar": HTMLTpChartBarElement;
        "tp-comparison-chart-bar": HTMLTpComparisonChartBarElement;
        "tp-input-container": HTMLTpInputContainerElement;
        "tp-rate-like": HTMLTpRateLikeElement;
    }
}
declare namespace LocalJSX {
    interface TpAlert {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define o icon a ser exibido no componente.
         */
        "icon"?: string;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define a string a ser exibida no componente.
         */
        "message"?: string;
        /**
          * Define a variação de estado do componente.
         */
        "state"?: TpAlertType['state'];
    }
    interface TpChartBar {
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a altura do componente.
         */
        "height"?: number;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define se o componente irá apresentar rótulo ou não.
         */
        "noLabel"?: boolean;
        /**
          * Define o valor do preenchimento do componente.
         */
        "value"?: number;
        /**
          * Define a largura do componente.
         */
        "width"?: number;
    }
    interface TpComparisonChartBar {
        /**
          * Define o preenchimento da coluna em porcentagem.
         */
        "barValue"?: number;
        /**
          * Define a variação de cor do componente.
         */
        "color"?: TpColor;
        /**
          * Define a altura máxima da coluna.
         */
        "containerHeight"?: number;
        /**
          * Define a estilização do estado disabled do componente.
         */
        "disabled"?: boolean;
        /**
          * Define se o componente terá um marcador.
         */
        "hasMarker"?: boolean;
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Define a posição, em porcentagem, do marcador na coluna.
         */
        "markerValue"?: number;
        /**
          * Define se o componente não terá rótulo.
         */
        "noLabel"?: boolean;
    }
    interface TpInputContainer {
        /**
          * Define a variação de estado do componente.
         */
        "state"?: 'error' | 'success';
    }
    interface TpRateLike {
        /**
          * Define o estado de carregamento do componente.
         */
        "loading"?: boolean;
        /**
          * Emitido quando a propriedade status é alterada.
         */
        "onTpChange"?: (event: TpRateLikeCustomEvent<TpRateLikeType['status']>) => void;
        /**
          * Define o status do componente.
         */
        "status"?: TpRateLikeType['status'];
    }
    interface IntrinsicElements {
        "tp-alert": TpAlert;
        "tp-chart-bar": TpChartBar;
        "tp-comparison-chart-bar": TpComparisonChartBar;
        "tp-input-container": TpInputContainer;
        "tp-rate-like": TpRateLike;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "tp-alert": LocalJSX.TpAlert & JSXBase.HTMLAttributes<HTMLTpAlertElement>;
            "tp-chart-bar": LocalJSX.TpChartBar & JSXBase.HTMLAttributes<HTMLTpChartBarElement>;
            "tp-comparison-chart-bar": LocalJSX.TpComparisonChartBar & JSXBase.HTMLAttributes<HTMLTpComparisonChartBarElement>;
            "tp-input-container": LocalJSX.TpInputContainer & JSXBase.HTMLAttributes<HTMLTpInputContainerElement>;
            "tp-rate-like": LocalJSX.TpRateLike & JSXBase.HTMLAttributes<HTMLTpRateLikeElement>;
        }
    }
}
