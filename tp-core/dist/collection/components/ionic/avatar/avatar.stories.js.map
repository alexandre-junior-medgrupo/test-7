{"version":3,"file":"avatar.stories.js","sourceRoot":"","sources":["../../../../src/components/ionic/avatar/avatar.stories.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AAExE,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,kBAAkB,GACnB,MAAM,yCAAyC,CAAC;AACjD,OAAO,EACL,WAAW,EACX,eAAe,EACf,aAAa,EACb,aAAa,EACb,eAAe,EACf,eAAe,GAChB,MAAM,iCAAiC,CAAC;AACzC,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAGlD,mBAAmB,EAAE,CAAC;AAEtB,MAAM,IAAI,GAAmD;EAC3D,KAAK,EAAE,yBAAyB;EAChC,QAAQ,EAAE;IACR,UAAU,EAAE;MACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;MAC3B,OAAO,EAAE,CAAC,GAAG,SAAS,EAAE,GAAG,iBAAiB,EAAE,GAAG,kBAAkB,CAAC;MACpE,WAAW,EAAE;;uBAEI,WAAW,CAAC,IAAI,WAAW,eAAe,CAAC,QAAQ,WAAW,eAAe,CAAC,QAAQ,WAAW,eAAe,CAAC,QAAQ,YAAY,aAAa,CAAC,MAAM;;oBAE5J,aAAa,CAAC,MAAM,mDAAmD;MACrF,KAAK,EAAE;QACL,YAAY,EAAE;UACZ,OAAO,EAAE,WAAW;SACrB;QACD,IAAI,EAAE;UACJ,OAAO,EAAE;YACP,GAAG,SAAS;YACZ,GAAG,iBAAiB;YACpB,GAAG,kBAAkB;WACtB,CAAC,IAAI,CAAC,GAAG,CAAC;SACZ;OACF;KACF;IACD,CAAC,SAAS,CAAC,EAAE;MACX,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;MAC3B,OAAO,EAAE,CAAC,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;MACtC,WAAW,EAAE,kCAAkC;MAC/C,KAAK,EAAE;QACL,YAAY,EAAE;UACZ,OAAO,EAAE,WAAW;SACrB;QACD,IAAI,EAAE;UACJ,OAAO,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;SAC5C;OACF;KACF;IACD,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;GACpC;CACF,CAAC;AAEF,eAAe,IAAI,CAAC;AAIpB,MAAM,CAAC,MAAM,OAAO,GAAU;EAC5B,MAAM,EAAE,CAAC,EAAW,EAAE,EAAE;QAAV,IAAI,cAAT,EAAW,CAAF;IAAO,OAAA,IAAI,CAAA;4BACH,IAAI,CAAC,UAAU,CAAC,cAAc,IAAI,CAAC,SAAS,CAAC;;;GAGtE,CAAA;GAAA;EACD;;;OAGK;CACN,CAAC;AAEF,MAAM,CAAC,MAAM,KAAK,GAAU;EAC1B,MAAM,EAAE,CAAC,EAAW,EAAE,EAAE;QAAV,IAAI,cAAT,EAAW,CAAF;IAAO,OAAA,IAAI,CAAA;2BACJ,IAAI,CAAC,SAAS,CAAC;;;;;;GAMvC,CAAA;GAAA;EACD;;;OAGK;CACN,CAAC;AACF,KAAK,CAAC,QAAQ,GAAG;EACf,UAAU,EAAE,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;CACzC,CAAC","sourcesContent":["import { Components } from '@ionic/core';\nimport { defineCustomElement } from '@ionic/core/components/ion-avatar';\nimport type { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport {\n  TP_COLORS,\n  TP_COLORS_MEDSOFT,\n  TP_COLORS_RECURSOS,\n} from '../../../utils/constants/color.constant';\nimport {\n  TpColorAula,\n  TpColorMaterial,\n  TpColorOrange,\n  TpColorProvas,\n  TpColorQuestoes,\n  TpColorRevalida,\n} from '../../../utils/enums/color.enum';\nimport { TP_ION_AVATAR } from './avatar.constant';\nimport { TpIonAvatar } from './avatar.type';\n\ndefineCustomElement();\n\nconst meta: Meta<Components.IonAvatar & TpIonAvatar & any> = {\n  title: 'components/Ionic/Avatar',\n  argTypes: {\n    'tp-color': {\n      control: { type: 'select' },\n      options: [...TP_COLORS, ...TP_COLORS_MEDSOFT, ...TP_COLORS_RECURSOS],\n      description: `Define a cor do componente.\n\n**OBS**: As cores **'${TpColorAula.Aula}'**, **'${TpColorMaterial.Material}'**, **'${TpColorQuestoes.Questoes}'**, **'${TpColorRevalida.Revalida}'** e **'${TpColorProvas.Provas}'** estão disponiveis apenas no theme **MedSoft**.\n\n**OBS**: A cor **'${TpColorOrange.Orange}'** está disponivel apenas no theme **Recursos**.`,\n      table: {\n        defaultValue: {\n          summary: 'undefined',\n        },\n        type: {\n          summary: [\n            ...TP_COLORS,\n            ...TP_COLORS_MEDSOFT,\n            ...TP_COLORS_RECURSOS,\n          ].join('|'),\n        },\n      },\n    },\n    ['tp-size']: {\n      control: { type: 'select' },\n      options: [...TP_ION_AVATAR['tp-size']],\n      description: 'Define  o tamanho do componente.',\n      table: {\n        defaultValue: {\n          summary: 'undefined',\n        },\n        type: {\n          summary: TP_ION_AVATAR['tp-size'].join('|'),\n        },\n      },\n    },\n    color: { table: { disable: true } },\n  },\n};\n\nexport default meta;\n\ntype Story = StoryObj<Components.IonAvatar & TpIonAvatar>;\n\nexport const Default: Story = {\n  render: ({ ...args }) => html`\n    <ion-avatar tp-color=\"${args['tp-color']}\" tp-size=\"${args['tp-size']}\">\n      <ion-label>AB</ion-label>\n    </ion-avatar>\n  `,\n  /* play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/ion-avatar/gi)).toBeTruthy();\n  }, */\n};\n\nexport const Image: Story = {\n  render: ({ ...args }) => html`\n    <ion-avatar tp-size=\"${args['tp-size']}\">\n      <img\n        src=\"https://ionicframework.com/docs/img/demos/avatar.svg\"\n        alt=\"Silhouette of a person's head\"\n      />\n    </ion-avatar>\n  `,\n  /* play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/ion-avatar/gi)).toBeTruthy();\n  }, */\n};\nImage.argTypes = {\n  'tp-color': { table: { disable: true } },\n};\n"]}